#ifndef BLACK_HOLE_COMMON_COMP
#define BLACK_HOLE_COMMON_COMP

#include "black_hole.in"

#ifdef RAY_QUERY
#extension GL_EXT_ray_query : require
#extension GL_EXT_ray_flags_primitive_culling : require
#endif // RAY_QUERY

// Black Hole params
// Black hole center is (0.0, 0.0, 0.0)
const float INV_BLACK_HOLE_RADIUS = 1.0F/BLACK_HOLE_RADIUS;
const float inv_pi = 0.318309886183790671538F;
const float pi = 3.14159265358979323846F;

const float INNER_RADIUS_OF_ACCRETION_DISK = 3.0F*BLACK_HOLE_RADIUS;
const float OUTER_RADIUS_OF_ACCRETION_DISK = 6.0F*BLACK_HOLE_RADIUS;
const vec3 ROTATION_AXIS_OF_ACCRETION_DISK = normalize(vec3(0.0F, 0.0F, 4.0F));
const vec3 COLOR_OF_ACCRETION_DISK = vec3(1.0F, 0.5F, 0.0F) * BLACK_HOLE_RADIUS * 300.0F;
const float THICKNESS_OF_ACCRETION_DISK = 0.01F;
const float INV_THICKNESS_OF_ACCRETION_DISK = 1.0F / THICKNESS_OF_ACCRETION_DISK;

#ifdef RAY_MARCHING

// Ray Marching params
const uint MAX_STEPS = 10000U;
const float TAN_STOP_ITER = 100.0F;
const float h = 0.003F;

#endif // RAY_MARCHING

// Camera params
const float HALF_FOV_HORIZONTAL_TAN = tan(radians(60));

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1U) in;

layout(set = 0, binding = BINDING_FINAL_IMAGE, rgba8) uniform restrict writeonly image2D outImage;
layout(set = 0, binding = BINDING_CUBE_MAP) uniform samplerCube spaceCubeMap;

#if defined(PRECOMPUTED)

layout(set = 0, binding = BINDING_PRECOMPUTED_PHI_TEXTURE) uniform sampler2D precomputedPhiTexture;
layout(set = 0, binding = BINDING_PRECOMPUTED_ACCR_DISK_DATA_TEXTURE) uniform sampler3D precomputedAccrDiskDataTexture;

#elif defined(RAY_QUERY)

layout(set = 0, binding = BINDING_RAY_QUERY_TLAS) uniform accelerationStructureEXT topLevelAS;

#endif // PRECOMPUTED, RAY_QUERY

layout(push_constant) uniform PushConst {
    layout(offset = PUSH_CONSTANT_CAMERA_POSITION_OFFSET)  vec3 cameraPos;
    layout(offset = PUSH_CONSTANT_CAMERA_DIRECTION_OFFSET) vec3 cameraDir;
};

// Give cameraDir for each pixel
vec3 initializeStartGrid() {
    vec2 resolution = vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + 0.5F)/resolution;
    vec2 xy = fma(uv, vec2(2.0F), vec2(-1.0F));

    const float horizontalScale = HALF_FOV_HORIZONTAL_TAN;
    float verticalScale = (resolution.y/resolution.x)*HALF_FOV_HORIZONTAL_TAN;

    vec3 horizontalCameraVec = horizontalScale*normalize(vec3(cameraDir.y, -cameraDir.x, 0.0));
    vec3 verticalCameraVec = verticalScale*normalize(cross(horizontalCameraVec, cameraDir));

    return cameraDir + horizontalCameraVec*xy.x + verticalCameraVec*xy.y;
}

// u = 1/r; r - radius
// uInfo = vec2(u, d(u)/d(phi));
void transformUInfoIntoDirectionAndPosition(vec2 uInfo, float phi, vec3 rotationAxis, out vec3 position, out vec3 direction) {
    vec3 normCameraPos = normalize(cameraPos);
    vec3 normRotationAxis = normalize(rotationAxis);
    vec3 normPerpendicular = cross(normRotationAxis, normCameraPos); // Normalized Perpendicular
    vec3 normPosition = normCameraPos * cos(phi) + normPerpendicular * sin(phi);
    float radius = (1.0F/uInfo.x);
    position = normPosition*radius;
    direction = normalize(cross(normRotationAxis, normPosition) - normPosition*uInfo.y*radius);
}

float rand(float n) {
    return fract(sin(n) * 43758.5453123F);
}

float noise(float p) {
	float fl = floor(p);
    float fc = fract(p);
	return mix(rand(fl), rand(fl + 1.0F), fc);
}

#ifdef RAY_MARCHING

float accretionDiskDensity(vec3 position) {
    float a = -dot(position, ROTATION_AXIS_OF_ACCRETION_DISK);
    if (abs(a) > THICKNESS_OF_ACCRETION_DISK) {return 0.0F;} // Save performance
    float r = length(position + a*ROTATION_AXIS_OF_ACCRETION_DISK);
    if (r < INNER_RADIUS_OF_ACCRETION_DISK || r > OUTER_RADIUS_OF_ACCRETION_DISK) {return 0.0F;} // Save performance
    return max(noise(r*400.0F) - abs(a)*INV_THICKNESS_OF_ACCRETION_DISK, 0.0F);
}

#include "black_hole_runge_kutte.glsl"

#endif // RAY_MARCHING

#ifdef PRECOMPUTED

float accretionDiskDensity(float r) {
    if (r < INNER_RADIUS_OF_ACCRETION_DISK || r > OUTER_RADIUS_OF_ACCRETION_DISK) {return 0.0F;} // Save performance
    return noise(r*400.0F);
}

vec2 SampleAngle(vec2 uInfo) {
    if (uInfo.x > INV_BLACK_HOLE_RADIUS) {
        return vec2(0.0F, -1.0F);
    }

    vec2 rawUV = vec2(uInfo.x*BLACK_HOLE_RADIUS, fma(atan(-uInfo.y*length(cameraPos)), inv_pi, 0.5F));

    const vec2 precomputedTextureSize = vec2(PRECOMPUTED_PHI_TEXTURE_WIDTH, PRECOMPUTED_PHI_TEXTURE_HEIGHT);
    const vec2 multiplier = (precomputedTextureSize - vec2(1.0F))/precomputedTextureSize;
    const vec2 addition = vec2(0.5F)/precomputedTextureSize;

    return texture(precomputedPhiTexture, fma(rawUV, multiplier, addition)).rg;
}

vec3 SampleAccrDisk(vec2 uInfo, float phi) {
    if (uInfo.x > INV_BLACK_HOLE_RADIUS) {
        return vec3(0.0F);
    }

    vec3 rawUVW = vec3(uInfo.x*BLACK_HOLE_RADIUS, fma(atan(-uInfo.y*length(cameraPos)), inv_pi, 0.5F), phi/pi);

    const vec3 precomputedTextureSize = vec3(PRECOMPUTED_ACCR_DISK_DATA_TEXTURE_WIDTH,
        PRECOMPUTED_ACCR_DISK_DATA_TEXTURE_HEIGHT, PRECOMPUTED_ACCR_DISK_DATA_TEXTURE_DEPTH);

    const vec3 multiplier = (precomputedTextureSize - vec3(1.0F))/precomputedTextureSize;
    const vec3 addition = vec3(0.5F)/precomputedTextureSize;

    vec2 radii = texture(precomputedAccrDiskDataTexture, fma(rawUVW, multiplier, addition)).rg;

    return (accretionDiskDensity(radii[0]) + accretionDiskDensity(radii[1]))*COLOR_OF_ACCRETION_DISK*0.1F;
}

#endif // PRECOMPUTED

vec3 traceRayBlackHole(vec3 pixelCameraDir) {
    // u = 1/r; r - radius
    // uInfo = vec2(u, d(u)/d(phi));
    float invInitialRadius = 1.0F/length(cameraPos);
    vec3 rotationAxis = cross(cameraPos, pixelCameraDir);
    vec2 uInfo = vec2(invInitialRadius, -(dot(cameraPos, pixelCameraDir)/length(rotationAxis))*invInitialRadius);
    float phi = 0.0F;

    // Forward declaration
    vec3 direction = pixelCameraDir;
    vec3 position = cameraPos;
    vec3 outputColor = vec3(0.0F);

#ifdef RAY_MARCHING

    for (uint i = 0U; i < MAX_STEPS; ++i) {
        // Case: Fall into black hole
        if (uInfo.x > INV_BLACK_HOLE_RADIUS) {
            return outputColor;
        }

        // Case: The ray is already flying in a straight line
        if (uInfo.y < -TAN_STOP_ITER*uInfo.x) {
            break;
        }

        uInfo = rk(uInfo, h);
        phi += h;

#if defined(RAY_QUERY)
        vec3 oldPosition = position;
        vec3 oldDirection = direction;
        transformUInfoIntoDirectionAndPosition(uInfo, phi, rotationAxis, position, direction);

        rayQueryEXT rayQuery;
        rayQueryInitializeEXT(rayQuery, topLevelAS, (gl_RayFlagsCullNoOpaqueEXT | gl_RayFlagsSkipAABBEXT),
            0xFF, oldPosition, 0.0F, position - oldPosition, 1.0F);
        while(rayQueryProceedEXT(rayQuery)) {
            // Only triangulated opaque objects are traversed.
            // So no need to commit intersections.
        }

        if (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT) {
            // TODO: Change it!
            outputColor += vec3(0.5F);
            return outputColor;
        }

        outputColor += accretionDiskDensity(position)*COLOR_OF_ACCRETION_DISK*h;
#else // Simple ray marching
        transformUInfoIntoDirectionAndPosition(uInfo, phi, rotationAxis, position, direction);
        outputColor += accretionDiskDensity(position)*COLOR_OF_ACCRETION_DISK*h;
#endif // RAY_QUERY
    }

    // Case: Go into infinity
    transformUInfoIntoDirectionAndPosition(uInfo, phi, rotationAxis, position, direction);
    outputColor += texture(spaceCubeMap, direction).rgb;
    return outputColor;

#elif defined(PRECOMPUTED)

    vec3 intersectionVec = cross(rotationAxis, ROTATION_AXIS_OF_ACCRETION_DISK);
    float dotProd = dot(cameraPos, intersectionVec);
    if (dotProd < 0.0F) {
        intersectionVec = -intersectionVec;
        dotProd = -dotProd;
    }

    phi = acos(dotProd/(length(cameraPos)*length(intersectionVec)));

    if (dot(cross(rotationAxis, cameraPos), intersectionVec) > 0.0F) {
        phi = pi - phi;
    }

    outputColor = SampleAccrDisk(uInfo, phi);

    vec2 phiAndFlags = SampleAngle(uInfo);

    if (phiAndFlags.y < 0.0F) {
        return outputColor;
    }

    transformUInfoIntoDirectionAndPosition(uInfo, phiAndFlags.x, rotationAxis, position, direction);
    return outputColor + texture(spaceCubeMap, position).rgb;

#endif // RAY_MARCHING, PRECOMPUTED

}

void main() {
    vec3 pixelCameraDir = initializeStartGrid();
    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(traceRayBlackHole(pixelCameraDir), 1.0F));
}

#endif // BLACK_HOLE_COMMON_COMP