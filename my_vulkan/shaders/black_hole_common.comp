#ifndef BLACK_HOLE_COMMON_COMP
#define BLACK_HOLE_COMMON_COMP

#include "black_hole.in"

#ifdef RAY_QUERY
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_ray_flags_primitive_culling : require
#endif // RAY_QUERY

// Black Hole params
// Black hole center is (0.0, 0.0, 0.0)
const float INV_BLACK_HOLE_RADIUS = 1.0F/BLACK_HOLE_RADIUS;
const float inv_pi = 0.318309886183790671538F;
const float pi = 3.14159265358979323846F;

const float INNER_RADIUS_OF_ACCRETION_DISK = 3.0F*BLACK_HOLE_RADIUS;
const float OUTER_RADIUS_OF_ACCRETION_DISK = 6.0F*BLACK_HOLE_RADIUS;
const vec3 ROTATION_AXIS_OF_ACCRETION_DISK = normalize(vec3(0.0F, 0.0F, 4.0F));
const vec3 COLOR_OF_ACCRETION_DISK = vec3(1.0F, 0.5F, 0.0F) * BLACK_HOLE_RADIUS * 300.0F;
const float THICKNESS_OF_ACCRETION_DISK = 0.01F;
const float INV_THICKNESS_OF_ACCRETION_DISK = 1.0F / THICKNESS_OF_ACCRETION_DISK;

#ifdef RAY_MARCHING

// Ray Marching params
const uint MAX_STEPS = 10000U;
const float TAN_STOP_ITER = 100.0F;
const float COS_STOP_ITER = 0.99995000375F;
const float h = 0.01F;

#endif // RAY_MARCHING

// Camera params
const float HALF_FOV_HORIZONTAL_TAN = tan(radians(60));

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1U) in;

layout(set = 0, binding = BINDING_FINAL_IMAGE, rgba8) uniform restrict writeonly image2D outImage;
layout(set = 0, binding = BINDING_CUBE_MAP) uniform samplerCube spaceCubeMap;

#if defined(RAY_QUERY)

layout(set = 0, binding = BINDING_RAY_QUERY_TLAS) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = BINDING_RAY_QUERY_TEXTURES) uniform sampler2D blasTextures[NUM_OF_BLAS_TEXTURES];

layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer TexCoord {
    vec2 data;
};

layout(std430, buffer_reference, buffer_reference_align = 4) readonly buffer TexCoordIndex {
    uint data;
};

#endif // RAY_QUERY

layout(push_constant) uniform PushConst {
    vec3 cameraPos;
    vec3 cameraDir;
#ifdef RAY_QUERY
    uint64_t texCoordsBufferAddress[NUM_OF_BLAS_TEXTURES];
    uint64_t texCoordIndicesBufferAddress[NUM_OF_BLAS_TEXTURES];
#endif // RAY_QUERY
};

// Give cameraDir for each pixel
vec3 initializeStartGrid() {
    vec2 resolution = vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + 0.5F)/resolution;
    vec2 xy = fma(uv, vec2(2.0F), vec2(-1.0F));

    const float horizontalScale = HALF_FOV_HORIZONTAL_TAN;
    float verticalScale = (resolution.y/resolution.x)*HALF_FOV_HORIZONTAL_TAN;

    vec3 horizontalCameraVec = horizontalScale*normalize(vec3(cameraDir.y, -cameraDir.x, 0.0));
    vec3 verticalCameraVec = verticalScale*normalize(cross(cameraDir, horizontalCameraVec));

    return cameraDir + horizontalCameraVec*xy.x + verticalCameraVec*xy.y;
}

float rand(float n) {
    return fract(sin(n) * 43758.5453123F);
}

float noise(float p) {
	float fl = floor(p);
    float fc = fract(p);
	return mix(rand(fl), rand(fl + 1.0F), fc);
}

float accretionDiskDensity(vec3 position) {
    float a = -dot(position, ROTATION_AXIS_OF_ACCRETION_DISK);
    if (abs(a) > THICKNESS_OF_ACCRETION_DISK) {return 0.0F;} // Save performance
    float r = length(position + a*ROTATION_AXIS_OF_ACCRETION_DISK);
    if (r < INNER_RADIUS_OF_ACCRETION_DISK || r > OUTER_RADIUS_OF_ACCRETION_DISK) {return 0.0F;} // Save performance
    return max(noise(r*400.0F) - abs(a)*INV_THICKNESS_OF_ACCRETION_DISK, 0.0F);
}

#include "black_hole_runge_kutte.glsl"

#ifdef RAY_QUERY

// Return value is true if ray hit happens.
bool rayTraversal(vec3 origin, vec3 direction, inout vec3 outputColor) {
    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, topLevelAS, (gl_RayFlagsCullNoOpaqueEXT | gl_RayFlagsSkipAABBEXT),
        0xFF, origin, 0.0F, direction, 1.0F);

    while(rayQueryProceedEXT(rayQuery)) {
        // Only triangulated opaque objects are traversed.
        // So no need to commit intersections.
    }

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT) {
        uint instanceCustomID = uint(rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true));
        uint primitiveID = uint(rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true));

        TexCoordIndex texCoordIndexBase = TexCoordIndex(texCoordIndicesBufferAddress[instanceCustomID]);
        uvec3 indices = uvec3((texCoordIndexBase + primitiveID*3U).data,
            (texCoordIndexBase + primitiveID*3U + 1U).data, (texCoordIndexBase + primitiveID*3U + 2U).data);

        vec2 texCoord0 = (TexCoord(texCoordsBufferAddress[instanceCustomID]) + indices[0]).data;
        vec2 texCoord1 = (TexCoord(texCoordsBufferAddress[instanceCustomID]) + indices[1]).data;
        vec2 texCoord2 = (TexCoord(texCoordsBufferAddress[instanceCustomID]) + indices[2]).data;

        vec2 barycentricCoords = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
        vec2 texCoord = ((1.0F - barycentricCoords.x - barycentricCoords.y)*texCoord0 +
            barycentricCoords.x*texCoord1 + barycentricCoords.y*texCoord2);
        outputColor += texture(blasTextures[nonuniformEXT(instanceCustomID)], texCoord).rgb;
        return true;
    }

    return false;
}

#endif // RAY_QUERY

void transformGeodesicCoordToPosition(GeodesicData geodesicData, vec3 rotationAxis, out vec3 position, out vec3 direction) {
    float radius = geodesicData.coord[0];
    float phi = geodesicData.coord[2];

    vec3 normCameraPos = normalize(cameraPos);
    vec3 normRotationAxis = normalize(rotationAxis);
    vec3 normPerpendicular = cross(normRotationAxis, normCameraPos); // Normalized Perpendicular
    vec3 normPosition = normCameraPos * cos(phi) + normPerpendicular * sin(phi);
    position = normPosition*radius;
    direction = normalize(cross(normRotationAxis, normPosition) + normPosition*(geodesicData.derivative[0]/geodesicData.derivative[2])/radius);
}

vec3 traceRayBlackHole(vec3 pixelCameraDir) {
    vec3 position = cameraPos;
    vec3 direction = normalize(pixelCameraDir);
    vec3 outputColor = vec3(0.0F);
    vec3 rotationAxis = cross(cameraPos, direction);

    // Remember, theta is constant pi/2.
    GeodesicData geodesicData = initGeodesicData(position, direction);

    for (uint i = 0U; i < MAX_STEPS; ++i) {
        // Case: Fall into black hole
        if (geodesicData.coord[0] < BLACK_HOLE_RADIUS) {
            return outputColor;
        }

        // Case: The ray is already flying in a straight line (includes case when ray is far away).
        if (dot(direction, normalize(position)) > COS_STOP_ITER) {
            break;
        }


        float lambdaStep = 0.001F*geodesicData.coord[0]/BLACK_HOLE_RADIUS;
        geodesicData = rk(geodesicData, lambdaStep);

#ifdef RAY_QUERY
        vec3 oldPosition = position;
#endif // RAY_QUERY
        transformGeodesicCoordToPosition(geodesicData, rotationAxis, position, direction);
#ifdef RAY_QUERY
        if (rayTraversal(oldPosition, position - oldPosition, outputColor)) {
            return outputColor;
        }
#endif // RAY_QUERY
        outputColor += accretionDiskDensity(position)*COLOR_OF_ACCRETION_DISK*h;
    }

    // Case: Go into infinity
#if defined(RAY_QUERY)
    if (rayTraversal(position, BLACK_HOLE_RADIUS*100000.0F*direction, outputColor)) {
        return outputColor;
    }
#endif // RAY_QUERY
    outputColor += texture(spaceCubeMap, direction).rgb;
    return outputColor;

}

void main() {
    vec3 pixelCameraDir = initializeStartGrid();
    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(traceRayBlackHole(pixelCameraDir), 1.0F));
}

#endif // BLACK_HOLE_COMMON_COMP