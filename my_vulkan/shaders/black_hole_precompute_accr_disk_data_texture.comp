#version 460

#include "black_hole.in"

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1U) in;

layout(set = 0, binding = BINDING_PRECOMPUTED_ACCR_DISK_DATA_TEXTURE, rg32f) uniform restrict writeonly image3D precomputedAccrDiskDataTexture;

const uint MAX_STEPS = 25000U;
const float h = 0.003F;
const float TAN_STOP_ITER = 1000.0F;
const float pi = 3.14159265358979323846F;

#define RUNGE_KUTTE_4
#include "black_hole_runge_kutte.glsl"

// x in range [0.0F, 1.0F]
float AvoidOverflow(float x) {
    return fma(x, 0.99999F, 0.000005F);
}

vec2 ComputeAccrDiskData() {
    float u = AvoidOverflow(float(gl_GlobalInvocationID.x)/float(PRECOMPUTED_ACCR_DISK_DATA_TEXTURE_WIDTH - 1U))/BLACK_HOLE_RADIUS;
    vec2 uInfo = vec2(u, -tan((AvoidOverflow(float(gl_GlobalInvocationID.y)/float(PRECOMPUTED_ACCR_DISK_DATA_TEXTURE_HEIGHT - 1U)) - 0.5F)*pi) * u);
    float phi = AvoidOverflow(float(gl_GlobalInvocationID.z)/float(PRECOMPUTED_ACCR_DISK_DATA_TEXTURE_DEPTH - 1U))*pi;

    vec2 outputAccrDiskData = vec2(0.0F);

    for (uint i = 0U, index = 0U; i < MAX_STEPS && index < 2U; i++) {
        if (uInfo.x > 1.0F/BLACK_HOLE_RADIUS) {
            outputAccrDiskData[index] = 0.0F;
            index++;
            continue;
        }

        if (uInfo.y < -TAN_STOP_ITER*uInfo.x) {
            outputAccrDiskData[index] = 10000.0F*BLACK_HOLE_RADIUS;
            index++;
            continue;
        }

        if (phi > pi) {
            outputAccrDiskData[index] = 1.0F/uInfo.x;
            index++;
            phi -= pi;
        }

        uInfo = rk(uInfo, h);
        phi += h;
    }

    return outputAccrDiskData;
}

void main() {
    imageStore(precomputedAccrDiskDataTexture, ivec3(gl_GlobalInvocationID.xyz), vec4(ComputeAccrDiskData(), vec2(0.0F)));
}